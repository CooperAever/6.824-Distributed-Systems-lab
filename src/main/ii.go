package main

import (
	"os"
	"mapreduce"
	"fmt"
	"unicode"
	"strings"
	"bytes"
	"sort"
	"strconv"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// Your code here (Part V).
	result := []mapreduce.KeyValue {}

	var buffer bytes.Buffer
	for _,char := range value{
		if(unicode.IsLetter(char)){
			buffer.WriteString(string(char))
		}else{
			if (buffer.String() != ""){
				result = append(result,mapreduce.KeyValue{buffer.String(),document})
				buffer.Reset()
			}
		}
	}

	if(buffer.String() != ""){
		result = append(result,mapreduce.KeyValue{buffer.String(),document})
	}
	return result
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// Your code here (Part V).
	result := ""
	cnt := 0
	sort.Strings(values)
	pre := ""
	for i:=0;i<len(values);i++{
		if pre == values[i]{
			continue
		}

		if i== 0{
			result = values[i]
		}else{
			result = strings.Join([]string{result, values[i]}, ",")
		}
		cnt++
		pre = values[i]
	}
	result = strings.Join([]string{strconv.Itoa(cnt), result}," ")
	// for _,val := range values{
	// 	if result == "" {
	// 		result = val
	// 		continue
	// 	}
	// 	result = strings.Join([]string{result, val}, ",")
	// }
	return result
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
